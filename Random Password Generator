<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator</title>
    <style>
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #a29bfe;
            --accent-color: #fd79a8;
            --background-color: #2d3436;
            --card-color: #353b48;
            --text-color: #dfe6e9;
            --text-dark: #636e72;
            --success-color: #00b894;
        }
        
        body {
            font-family: 'Montserrat', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--background-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        
        .container {
            background-color: var(--card-color);
            border-radius: 16px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 600px;
        }
        
        h1 {
            color: var(--accent-color);
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
            letter-spacing: 1px;
        }
        
        .password-display {
            background-color: rgba(0,0,0,0.2);
            border: 2px solid var(--secondary-color);
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 20px;
            margin-bottom: 25px;
            text-align: center;
            position: relative;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: var(--accent-color);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .options {
            margin-bottom: 30px;
        }
        
        label {
            display: block;
            margin-bottom: 12px;
            font-weight: 600;
        }
        
        .checkbox-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        .checkbox-label {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            background-color: rgba(0,0,0,0.2);
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .checkbox-label:hover {
            background-color: var(--primary-color);
        }
        
        input[type="checkbox"] {
            margin-right: 8px;
            appearance: none;
            width: 20px;
            height: 20px;
            background-color: rgba(0,0,0,0.2);
            border-radius: 4px;
            display: inline-block;
            position: relative;
            cursor: pointer;
        }
        
        input[type="checkbox"]:checked {
            background-color: var(--accent-color);
        }
        
        input[type="checkbox"]:checked::after {
            content: 'âœ“';
            position: absolute;
            color: white;
            font-size: 14px;
            top: 0;
            left: 5px;
        }
        
        .length-control {
            text-align: center;
            margin-bottom: 25px;
        }
        
        input[type="range"] {
            width: 100%;
            margin: 15px 0;
            -webkit-appearance: none;
            height: 8px;
            border-radius: 4px;
            background: linear-gradient(to right, var(--primary-color), var(--accent-color));
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background: var(--text-color);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.2);
        }
        
        .length-display {
            font-size: 24px;
            font-weight: bold;
            color: var(--accent-color);
            margin-bottom: 10px;
        }
        
        .button-group {
            display: flex;
            gap: 15px;
            margin-top: 25px;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 14px 20px;
            border-radius: 30px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            flex: 1;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
            letter-spacing: 1px;
            text-transform: uppercase;
        }
        
        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 7px 15px rgba(0,0,0,0.3);
        }
        
        button:active {
            transform: translateY(0);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .copy-btn {
            background-color: var(--success-color);
        }
        
        .strength-section {
            margin-bottom: 25px;
        }
        
        .strength-meter {
            height: 10px;
            background-color: rgba(0,0,0,0.2);
            border-radius: 10px;
            margin-bottom: 15px;
            overflow: hidden;
        }
        
        .strength-bar {
            height: 100%;
            width: 0%;
            transition: width 0.3s, background-color 0.3s;
        }
        
        .strength-text {
            font-size: 16px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
        }
        
        .toast {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background-color: var(--success-color);
            color: white;
            padding: 12px 25px;
            border-radius: 30px;
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            z-index: 1000;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .show-toast {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 25px;
                border-radius: 12px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .button-group {
                flex-direction: column;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1>Password Forge</h1>
        
        <div class="password-display" id="passwordDisplay">
            Click "Generate" for a new password
        </div>
        
        <div class="strength-section">
            <div class="strength-meter">
                <div class="strength-bar" id="strengthBar"></div>
            </div>
            <div class="strength-text" id="strengthText">Password strength</div>
        </div>
        
        <div class="options">
            <div class="length-control">
                <div class="length-display">
                    <span id="lengthValue">12</span> characters
                </div>
                <input type="range" id="lengthSlider" min="4" max="64" value="12" class="slider">
            </div>
            
            <div class="checkbox-container">
                <label class="checkbox-label">
                    <input type="checkbox" id="uppercaseCheck" checked> Uppercase
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="lowercaseCheck" checked> Lowercase
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="numbersCheck" checked> Numbers
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="symbolsCheck" checked> Symbols
                </label>
            </div>
        </div>
        
        <div class="button-group">
            <button id="generateBtn">Generate</button>
            <button id="copyBtn" class="copy-btn">Copy</button>
        </div>
    </div>
    
    <div class="toast" id="toast">Password copied to clipboard!</div>

    <script>
        // DOM Elements
        const passwordDisplay = document.getElementById('passwordDisplay');
        const lengthSlider = document.getElementById('lengthSlider');
        const lengthValue = document.getElementById('lengthValue');
        const uppercaseCheck = document.getElementById('uppercaseCheck');
        const lowercaseCheck = document.getElementById('lowercaseCheck');
        const numbersCheck = document.getElementById('numbersCheck');
        const symbolsCheck = document.getElementById('symbolsCheck');
        const generateBtn = document.getElementById('generateBtn');
        const copyBtn = document.getElementById('copyBtn');
        const toast = document.getElementById('toast');
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        // Character sets
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const numbers = '0123456789';
        const symbols = '!@#$%^&*()_+-=[]{}|;:\'",.<>/?\\';
        
        // Update length display
        lengthSlider.addEventListener('input', () => {
            lengthValue.textContent = lengthSlider.value;
        });
        
        // Generate password
        generateBtn.addEventListener('click', generatePassword);
        
        // Copy password
        copyBtn.addEventListener('click', () => {
            if (passwordDisplay.textContent !== 'Click "Generate" for a new password') {
                navigator.clipboard.writeText(passwordDisplay.textContent).then(() => {
                    showToast();
                });
            }
        });
        
        // Generate password
        function generatePassword() {
            // Ensure at least one character type is selected
            if (!uppercaseCheck.checked && !lowercaseCheck.checked && 
                !numbersCheck.checked && !symbolsCheck.checked) {
                alert('Please select at least one character type');
                return;
            }
            
            const length = parseInt(lengthSlider.value);
            let charset = '';
            let password = [];
            
            // Add characters from selected types
            if (uppercaseCheck.checked) charset += uppercase;
            if (lowercaseCheck.checked) charset += lowercase;
            if (numbersCheck.checked) charset += numbers;
            if (symbolsCheck.checked) charset += symbols;
            
            // Ensure we have at least one character from each selected type
            if (uppercaseCheck.checked && length > 0) {
                password.push(uppercase.charAt(Math.floor(Math.random() * uppercase.length)));
            }
            
            if (lowercaseCheck.checked && length > password.length) {
                password.push(lowercase.charAt(Math.floor(Math.random() * lowercase.length)));
            }
            
            if (numbersCheck.checked && length > password.length) {
                password.push(numbers.charAt(Math.floor(Math.random() * numbers.length)));
            }
            
            if (symbolsCheck.checked && length > password.length) {
                password.push(symbols.charAt(Math.floor(Math.random() * symbols.length)));
            }
            
            // Fill remaining length with random characters
            while (password.length < length) {
                password.push(charset.charAt(Math.floor(Math.random() * charset.length)));
            }
            
            // Shuffle the array
            password = shuffleArray(password);
            
            // Update display
            const finalPassword = password.join('');
            passwordDisplay.textContent = finalPassword;
            
            // Update strength meter
            updateStrengthMeter(finalPassword);
            
            // Add animation effect
            passwordDisplay.style.animation = 'none';
            setTimeout(() => {
                passwordDisplay.style.animation = 'pulse 1s';
            }, 10);
        }
        
        // Fisher-Yates shuffle algorithm
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        // Show toast message
        function showToast() {
            toast.classList.add('show-toast');
            setTimeout(() => {
                toast.classList.remove('show-toast');
            }, 2000);
        }
        
        // Update password strength meter
        function updateStrengthMeter(password) {
            // Calculate password strength
            let strength = 0;
            const length = password.length;
            
            // Length factor (0-25)
            strength += Math.min(length * 2, 25);
            
            // Character variety factors
            if (/[A-Z]/.test(password)) strength += 10;
            if (/[a-z]/.test(password)) strength += 10;
            if (/[0-9]/.test(password)) strength += 10;
            if (/[^A-Za-z0-9]/.test(password)) strength += 15;
            
            // Complexity patterns
            if (/[A-Z].*[A-Z]/.test(password)) strength += 5;
            if (/[a-z].*[a-z]/.test(password)) strength += 5;
            if (/[0-9].*[0-9]/.test(password)) strength += 5;
            if (/[^A-Za-z0-9].*[^A-Za-z0-9]/.test(password)) strength += 5;
            
            // Adjust final score to be between 0-100
            strength = Math.min(strength, 100);
            
            // Update strength bar
            strengthBar.style.width = strength + '%';
            
            // Set color based on strength
            if (strength < 30) {
                strengthBar.style.backgroundColor = '#ff6b6b'; // Red (weak)
                strengthText.textContent = 'Weak password';
            } else if (strength < 60) {
                strengthBar.style.backgroundColor = '#feca57'; // Yellow (medium)
                strengthText.textContent = 'Medium password';
            } else if (strength < 80) {
                strengthBar.style.backgroundColor = '#1dd1a1'; // Green (strong)
                strengthText.textContent = 'Strong password';
            } else {
                strengthBar.style.backgroundColor = '#00d2d3'; // Teal (very strong)
                strengthText.textContent = 'Very strong password';
            }
        }
        
        // Animation for password display
        const style = document.createElement('style');
        style.textContent = `
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.03); }
                100% { transform: scale(1); }
            }
        `;
        document.head.appendChild(style);
        
        // Generate a password on page load
        generatePassword();
    </script>
</body>
</html>
